package com.db.operations.config;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.stereotype.Component;

import com.db.operations.config.secrets.VaultStaticSecrets;

@Component
public class LiquibasePropertiesUpdater implements ApplicationRunner {

    private final VaultStaticSecrets vaultStaticSecrets;
    private final String vaultToken;
    private final String secretPath;
    private final String secretKey;

    public LiquibasePropertiesUpdater(
            VaultStaticSecrets vaultStaticSecrets,
            @Value("${vault.token}") String vaultToken,
            @Value("${vault.secretPath}") String secretPath,
            @Value("${vault.secretKey}") String secretKey) {
        this.vaultStaticSecrets = vaultStaticSecrets;
        this.vaultToken = vaultToken;
        this.secretPath = secretPath;
        this.secretKey = secretKey;
    }

    public void updateLiquibaseProperties() throws IOException {
        Properties liquibaseProperties = new Properties();
        try (InputStream input = new FileInputStream("src/main/resources/liquibase/liquibase.properties")) {
            liquibaseProperties.load(input);
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        try {
            Map<String, String> secrets = vaultStaticSecrets.readKVSecrets(vaultToken, secretPath, secretKey);
            Set<String> allowedKeys = Stream.of("driver", "url", "username", "password").collect(Collectors.toSet());
            for (Map.Entry<String, String> entry : secrets.entrySet()) {
                if (allowedKeys.contains(entry.getKey())) {
                    liquibaseProperties.setProperty(entry.getKey(), entry.getValue());
                }
            }
            try (OutputStream output = new FileOutputStream("src/main/resources/liquibase/liquibase.properties")) {
                liquibaseProperties.store(output, null);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run(ApplicationArguments args) throws Exception {
        updateLiquibaseProperties();
    }
}
