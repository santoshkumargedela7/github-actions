package com.db.operations.config.secrets;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.json.JSONObject;
import org.springframework.http.*;
import java.util.HashMap;
import java.util.Map;

@Component
public class VaultAuthenticator {

    private static final Logger LOGGER = LoggerFactory.getLogger(VaultAuthenticator.class);

    private final String vaultUrl;
    private final String appLOB;
    private final int maxRetries;
    private final long backoffInterval;
    private final long maxBackoffInterval;

    public VaultAuthenticator(
            @Value("${vault.url}") String vaultUrl,
            @Value("${vault.appLOB}") String appLOB,
            @Value("${vault.maxRetries}") int maxRetries,
            @Value("${vault.backoffInterval}") long backoffInterval,
            @Value("${vault.maxBackoffInterval}") long maxBackoffInterval) {
        this.vaultUrl = vaultUrl;
        this.appLOB = appLOB;
        this.maxRetries = maxRetries;
        this.backoffInterval = backoffInterval;
        this.maxBackoffInterval = maxBackoffInterval;
    }

    public String authenticateAppRole(String roleId, String secretId, String authPath) {
        int numRetries = 0;
        String vaultToken = null;
        String vaultAuthEndPoint = vaultUrl + "/v1/" + appLOB + "/" + authPath;
        while (numRetries < maxRetries) {
            try {
                Map<String, String> requestMap = new HashMap<>();
                requestMap.put("role_id", roleId);
                requestMap.put("secret_id", secretId);

                ResponseEntity<String> responseEntity = VaultAuthenticator.createRestTemplate().postForEntity(vaultAuthEndPoint, requestMap, String.class);
                LOGGER.info(" responseEntity  " +responseEntity.getBody());
                HttpStatus status = responseEntity.getStatusCode();

                if (status.is2xxSuccessful()) {
                    JSONObject responseBody = new JSONObject(responseEntity.getBody());
                    if(responseBody != null) {
                        JSONObject authBodyJson = responseBody.getJSONObject("auth");
                        if(authBodyJson != null) {
                            vaultToken = authBodyJson.getString("client_token");
                            LOGGER.info("Vault authentication successful and returned token: {}", vaultToken);
                            return vaultToken;
                        } else {
                            LOGGER.error("The auth section with-in the response body returned is empty");
                            numRetries++;
                            LOGGER.warn("Retrying Vault authentication after {} milliseconds", backoffInterval * numRetries);
                        }
                    } else {
                        LOGGER.error("The response body returned is empty");
                        numRetries++;
                        LOGGER.warn("Retrying Vault authentication after {} milliseconds", backoffInterval * numRetries);
                    }
                } else {
                    JSONObject errorBody = new JSONObject(responseEntity.getBody());
                    String errorCode =errorBody.getString("code");
                    String errorMessage = errorBody.getString("message");

                    LOGGER.error("Vault authentication failed with errorCode: {} and error: {}", errorCode, errorMessage);
                }
            } catch (HttpClientErrorException ex) {
                if ((ex.getStatusCode() == HttpStatus.UNAUTHORIZED) || (ex.getStatusCode() == HttpStatus.BAD_REQUEST)) {
                    LOGGER.error("Vault authentication request failed with error: {}",  ex.getMessage());
                    break;
                } else {
                    LOGGER.error("Vault authentication request failed with error: {}", ex.getMessage());
                    numRetries++;
                    LOGGER.warn("Retrying Vault authentication after {} milliseconds", backoffInterval * numRetries);
                    ex.printStackTrace();
                    waitUntilConditionMet(backoffInterval * numRetries, maxBackoffInterval);
                }
            } catch (Exception ex) {
                numRetries++;
                LOGGER.warn("Retrying Vault authentication after {} milliseconds", backoffInterval * numRetries);
                ex.printStackTrace();
                waitUntilConditionMet(backoffInterval * numRetries, maxBackoffInterval);
            }
        }
        if(numRetries >= maxRetries) {
            LOGGER.error("Max retries exceeded for Vault authentication");
        }
        return vaultToken;
    }

    private static RestTemplate createRestTemplate() {
        return new RestTemplate();
    }

    private void waitUntilConditionMet(long waitTime, long maxWaitTime) {
        long startTime = System.currentTimeMillis();
        try {
            while (System.currentTimeMillis() - startTime < maxWaitTime) {
                Thread.sleep(waitTime);
            }
        } catch (InterruptedException interruptedException) {
            LOGGER.error("InterruptedException when waking up the Thread in waitUntilConditionMet() ");
        }
    }
}
