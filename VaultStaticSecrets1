package com.db.operations.config.secrets;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;
import org.json.JSONObject;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;

@Component
public class VaultStaticSecrets {

    private static final Logger LOGGER = LoggerFactory.getLogger(VaultStaticSecrets.class);

    private final String vaultUrl;
    private final int maxRetries;
    private final long backoffInterval;
    private final long maxBackoffInterval;
    private final String appLOB;

    private final RestTemplate restTemplate;

    public VaultStaticSecrets(
            @Value("${vault.url}") String vaultUrl,
            @Value("${vault.maxRetries}") int maxRetries,
            @Value("${vault.backoffInterval}") long backoffInterval,
            @Value("${vault.maxBackoffInterval}") long maxBackoffInterval,
            @Value("${vault.appLOB}") String appLOB) {
        this.vaultUrl = vaultUrl;
        this.maxRetries = maxRetries;
        this.backoffInterval = backoffInterval;
        this.maxBackoffInterval = maxBackoffInterval;
        this.appLOB = appLOB;
        this.restTemplate = new RestTemplate();
    }

    public Map<String, String> readKVSecrets(String vaultToken, String secretPath, String secretKey) {
        int numRetries = 0;
        Map<String, String> secrets = null;
        String kvSecretPath = vaultUrl + "/v1/" + appLOB + "/" + secretPath;

        while (numRetries < maxRetries) {
            try {
                HttpHeaders headers = new HttpHeaders();
                headers.setBearerAuth(vaultToken);
                HttpEntity<String> entity = new HttpEntity<>(null, headers);
                ResponseEntity<String> responseEntity = restTemplate.exchange(kvSecretPath, HttpMethod.GET, entity, String.class);
                HttpStatus status = responseEntity.getStatusCode();

                if (status.is2xxSuccessful()) {
                    JSONObject jsonResponse = new JSONObject(responseEntity.getBody());
                    if (jsonResponse != null) {
                        JSONObject parentData = jsonResponse.getJSONObject("data");
                        if (parentData != null) {
                            JSONObject data = parentData.getJSONObject("data");
                            LOGGER.info(" **************** KV Data " + data.toString());

                            secrets = new HashMap<>();
                            if (data.has(secretKey)) {
                                LOGGER.info("Reading secrets from Key-Value: {} successful", secrets);
                                secrets.put(secretKey, data.getString(secretKey));
                                return secrets;
                            } else {
                                LOGGER.error("There is no entry in the KV : {} for the Secret Key: {}", kvSecretPath, secretKey);
                                break;
                            }
                        } else {
                            LOGGER.error("The data section with-in the response body returned is empty");
                            numRetries++;
                            LOGGER.warn("Retrying database secret retrieval after {} milliseconds", backoffInterval * numRetries);
                        }
                    } else {
                        LOGGER.error("The response body returned is empty");
                        numRetries++;
                        LOGGER.warn("Retrying database secret retrieval after {} milliseconds", backoffInterval * numRetries);
                    }
                    LOGGER.info(jsonResponse.toString());
                } else {
                    JSONObject errorBody = new JSONObject(responseEntity.getBody());
                    String errorCode = errorBody.getString("code");
                    String errorMessage = errorBody.getString("message");
                    LOGGER.error("Error reading secrets from Key-Value with errorCode: {} and error: {}", errorCode, errorMessage);
                    numRetries++;
                    waitUntilConditionMet(backoffInterval * numRetries, maxBackoffInterval);
                }
            } catch (HttpClientErrorException ex) {
                if ((ex.getStatusCode() == HttpStatus.UNAUTHORIZED) || (ex.getStatusCode() == HttpStatus.BAD_REQUEST)) {
                    LOGGER.error("Reading secrets from Key-Value request failed with error: {}", ex.getMessage());
                    break;
                } else {
                    LOGGER.error("Reading secrets from Key-Value request failed with error: {}", ex.getMessage());
                    numRetries++;
                    LOGGER.warn("Retrying reading secrets from Key-Value after {} milliseconds", backoffInterval * numRetries);
                    ex.printStackTrace();
                    waitUntilConditionMet(backoffInterval * numRetries, maxBackoffInterval);
                }
            } catch (Exception ex) {
                numRetries++;
                LOGGER.warn("Retrying reading secrets from Key-Value after {} milliseconds", backoffInterval * numRetries);
                waitUntilConditionMet(backoffInterval * numRetries, maxBackoffInterval);
            }
        }
        if (numRetries >= maxRetries) {
            LOGGER.error("Max retries exceeded for reading secrets from Key-Value: {}", secretPath);
        }
        return secrets;
    }

    private void waitUntilConditionMet(long waitTime, long maxWaitTime) {
        long startTime = System.currentTimeMillis();
        try {
            while (System.currentTimeMillis() - startTime < maxWaitTime) {
                Thread.sleep(waitTime);
            }
        } catch (InterruptedException interruptedException) {
            LOGGER.error("InterruptedException when waking up the Thread in waitUntilConditionMet() ");
        }
    }
}
