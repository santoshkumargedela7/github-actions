package com.db.operations.config.secrets;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContexts;
import org.json.JSONObject;
import org.springframework.http.*;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;

import java.io.File;
import java.io.FileInputStream;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

@Component
public class VaultAuthenticator {

	private static final Logger LOGGER = LoggerFactory.getLogger(VaultAuthenticator.class);

	private final String vaultUrl;
	private final String appLOB;
	private final int maxRetries;
	private final long backoffInterval;
	private final long maxBackoffInterval;

	public VaultAuthenticator(@Value("${vault.url}") String vaultUrl, @Value("${vault.appLOB}") String appLOB,
			@Value("${vault.maxRetries}") int maxRetries, @Value("${vault.backoffInterval}") long backoffInterval,
			@Value("${vault.maxBackoffInterval}") long maxBackoffInterval) {
		this.vaultUrl = vaultUrl;
		this.appLOB = appLOB;
		this.maxRetries = maxRetries;
		this.backoffInterval = backoffInterval;
		this.maxBackoffInterval = maxBackoffInterval;
	}

	public String authenticateTLS(File keyStorePath, String keyStorePassword, File trustStorePath,
			String trustStorePassword, String authPath) {
		int numRetries = 0;
		String vaultToken = null;

		String vaultAuthEndPoint = vaultUrl + "/v1/" + appLOB + "/" + authPath;

		while (numRetries < maxRetries) {
			try {
				HttpHeaders headers = new HttpHeaders();
				RestTemplate restTemplate = new RestTemplate(new HttpComponentsClientHttpRequestFactory(
						getHttpClient(keyStorePath, keyStorePassword, trustStorePath, trustStorePassword)));

				HttpEntity<String> entity = new HttpEntity<String>(headers);
				ResponseEntity<String> responseEntity = restTemplate.exchange(vaultAuthEndPoint, HttpMethod.POST,
						entity, String.class);
				HttpStatus httpStatus = responseEntity.getStatusCode();

				if (httpStatus.is2xxSuccessful()) {
					JSONObject responseBody = new JSONObject(responseEntity.getBody());
					if (responseBody != null) {
						JSONObject authBodyJson = responseBody.getJSONObject("auth");
						if (authBodyJson != null) {
							vaultToken = authBodyJson.getString("client_token");
							LOGGER.info("Vault authentication successful and returned token: {}", vaultToken);
							return vaultToken;
						} else {
							LOGGER.error("The auth section with-in the response body returned is empty");
							numRetries++;
							LOGGER.warn("Retrying Vault authentication after {} milliseconds",
									backoffInterval * numRetries);
						}
					} else {
						LOGGER.error("The response body returned is empty");
						numRetries++;
						LOGGER.warn("Retrying Vault authentication after {} milliseconds",
								backoffInterval * numRetries);
					}
				} else {
					JSONObject errorBody = new JSONObject(responseEntity.getBody());
					String errorCode = errorBody.getString("code");
					String errorMessage = errorBody.getString("message");

					LOGGER.error("Vault authentication failed with errorCode: {} and error: {}", errorCode,
							errorMessage);
				}
			} catch (HttpClientErrorException ex) {
				if ((ex.getStatusCode() == HttpStatus.UNAUTHORIZED) || (ex.getStatusCode() == HttpStatus.BAD_REQUEST)) {
					LOGGER.error("Vault authentication request failed with error: {}", ex.getMessage());
					break;
				} else {
					LOGGER.error("Vault authentication request failed with error: {}", ex.getMessage());
					numRetries++;
					LOGGER.warn("Retrying Vault authentication after {} milliseconds", backoffInterval * numRetries);
					ex.printStackTrace();
					waitUntilConditionMet(backoffInterval * numRetries, maxBackoffInterval);
				}
			} catch (Exception ex) {
				numRetries++;
				LOGGER.warn("Retrying Vault authentication after {} milliseconds", backoffInterval * numRetries);
				ex.printStackTrace();
				waitUntilConditionMet(backoffInterval * numRetries, maxBackoffInterval);
			}
		}
		if (numRetries >= maxRetries) {
			LOGGER.error("Max retries exceeded for Vault authentication");
		}
		return vaultToken;

	}

	private static CloseableHttpClient getHttpClient(File keyStoreFile, String keyStorePassword, File trustStoreFile,
			String trustStorePassword) throws Exception {

		KeyStore keyStore = KeyStore.getInstance("PKCS12");
		keyStore.load(new FileInputStream(keyStoreFile), keyStorePassword.toCharArray());

		KeyStore trustStore = KeyStore.getInstance("JKS");
		trustStore.load(new FileInputStream(trustStoreFile), trustStorePassword.toCharArray());

		SSLContext sslContext = SSLContexts.custom().loadKeyMaterial(keyStore, keyStorePassword.toCharArray())
				.loadTrustMaterial(trustStore, null).build();

		SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext,
				new String[] { "TLSv1.2" }, null, SSLConnectionSocketFactory.getDefaultHostnameVerifier());

		return HttpClients.custom().setSSLContext(sslContext).build();
	}

	public String authenticateAppRole(String roleId, String secretId, String authPath) {
		int numRetries = 0;
		String vaultToken = null;
		String vaultAuthEndPoint = vaultUrl + "/v1/" + appLOB + "/" + authPath;
		while (numRetries < maxRetries) {
			try {
				Map<String, String> requestMap = new HashMap<>();
				requestMap.put("role_id", roleId);
				requestMap.put("secret_id", secretId);

				ResponseEntity<String> responseEntity = VaultAuthenticator.createRestTemplate()
						.postForEntity(vaultAuthEndPoint, requestMap, String.class);
				LOGGER.info(" responseEntity  " + responseEntity.getBody());
				HttpStatus status = responseEntity.getStatusCode();

				if (status.is2xxSuccessful()) {
					JSONObject responseBody = new JSONObject(responseEntity.getBody());
					if (responseBody != null) {
						JSONObject authBodyJson = responseBody.getJSONObject("auth");
						if (authBodyJson != null) {
							vaultToken = authBodyJson.getString("client_token");
							LOGGER.info("Vault authentication successful and returned token: {}", vaultToken);
							return vaultToken;
						} else {
							LOGGER.error("The auth section with-in the response body returned is empty");
							numRetries++;
							LOGGER.warn("Retrying Vault authentication after {} milliseconds",
									backoffInterval * numRetries);
						}
					} else {
						LOGGER.error("The response body returned is empty");
						numRetries++;
						LOGGER.warn("Retrying Vault authentication after {} milliseconds",
								backoffInterval * numRetries);
					}
				} else {
					JSONObject errorBody = new JSONObject(responseEntity.getBody());
					String errorCode = errorBody.getString("code");
					String errorMessage = errorBody.getString("message");

					LOGGER.error("Vault authentication failed with errorCode: {} and error: {}", errorCode,
							errorMessage);
				}
			} catch (HttpClientErrorException ex) {
				if ((ex.getStatusCode() == HttpStatus.UNAUTHORIZED) || (ex.getStatusCode() == HttpStatus.BAD_REQUEST)) {
					LOGGER.error("Vault authentication request failed with error: {}", ex.getMessage());
					break;
				} else {
					LOGGER.error("Vault authentication request failed with error: {}", ex.getMessage());
					numRetries++;
					LOGGER.warn("Retrying Vault authentication after {} milliseconds", backoffInterval * numRetries);
					ex.printStackTrace();
					waitUntilConditionMet(backoffInterval * numRetries, maxBackoffInterval);
				}
			} catch (Exception ex) {
				numRetries++;
				LOGGER.warn("Retrying Vault authentication after {} milliseconds", backoffInterval * numRetries);
				ex.printStackTrace();
				waitUntilConditionMet(backoffInterval * numRetries, maxBackoffInterval);
			}
		}
		if (numRetries >= maxRetries) {
			LOGGER.error("Max retries exceeded for Vault authentication");
		}
		return vaultToken;
	}

	

	public static RestTemplate createRestTemplate() throws NoSuchAlgorithmException, KeyManagementException {
		SSLContext sslContext = SSLContext.getInstance("TLS");
		TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
			@Override
			public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {

			}

			@Override
			public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {

			}

			@Override
			public X509Certificate[] getAcceptedIssuers() {
				return null;
			}
		} };

		sslContext.init(null, trustAllCerts, new SecureRandom());

		SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

		HttpsURLConnection.setDefaultSSLSocketFactory(sslSocketFactory);
		SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();
		requestFactory.setBufferRequestBody(false);
		requestFactory.setConnectTimeout(1000);
		requestFactory.setReadTimeout(1000);
		requestFactory.setOutputStreaming(false);
		// requestFactory.setTaskExecutor(new
		// ConcurrentTaskExecutor(Executors.newFixedThreadPool(4)));
		return new RestTemplate(requestFactory);
	}

	public boolean isValidToken(String vaultToken) throws Exception {
		int numRetries = 0;
		while (numRetries < maxRetries) {
			try {
				HttpHeaders headers = new HttpHeaders();
				headers.setBearerAuth(vaultToken);

				HttpEntity<String> entity = new HttpEntity<>(null, headers);

				RestTemplate restTemplate = null;
				ResponseEntity<String> response = restTemplate.exchange(vaultUrl + "/v1/auth/token/lookup-self",
						HttpMethod.GET, entity, String.class);

				return response.getStatusCode() == HttpStatus.OK;
			} catch (Exception ex) {
				numRetries++;
				Thread.sleep(backoffInterval * numRetries);
			}
		}
		throw new Exception("Max retries exceeded for checking token validity");
	}

	private void waitUntilConditionMet(long waitTime, long maxWaitTime) {
		long startTime = System.currentTimeMillis();
		try {
			while (System.currentTimeMillis() - startTime < maxWaitTime) {
				Thread.sleep(waitTime);
			}
		} catch (InterruptedException interruptedException) {
			LOGGER.error("InterruptedException when waking up the Thread in waitUntilConditionMet() ");
		}
	}
}
